"""Culture process taxon mixing class exploit_social_learning."""

# This file is part of pycopancore.
#
# Copyright (C) 2016-2017 by COPAN team at Potsdam Institute for Climate
# Impact Research
#
# URL: <http://www.pik-potsdam.de/copan/software>
# Contact: core@pik-potsdam.de
# License: BSD 2-clause license

from pycopancore.model_components.base import interface as B
from .. import interface as I
from .... import Step

import numpy as np
import networkx as nx


class Culture (I.Culture):
    """Culture process taxon mixin for exploit_social_learning."""

    # process-related methods:

    def social_update(self, t):
        """Execute the social update.

        Parameters
        ----------
        t : float
            time

        Returns
        -------

        """

        for agent in self.acquaintance_network:
            agent.update_time = np.random.exponential()

        ordered_list = list(self.acquaintance_network)
        n = len(ordered_list)
        for i in range(n):
            already_sorted = True
            for j in range(n-i-1):
                if ordered_list[j].update_time > ordered_list[j+1].update_time:
                    ordered_list[j], ordered_list[j+1] = ordered_list[j+1], ordered_list[j]
                    already_sorted = False
            if already_sorted:
                break

        for agent_i in ordered_list:
            # Step (1)
            if self.acquaintance_network.neighbors(agent_i):
                agent_j = np.random.choice(
                    list(self.acquaintance_network.neighbors(agent_i)))
                # Step (2): Compare strategies of i and j:
                # If they are the same, do nothing. Else change i's strategy.
                if agent_i.strategy != agent_j.strategy:
                    self.change_strategy(agent_i, agent_j)

    def change_strategy(self, agent_i, agent_j):
        """Change strategy of agent_i to agent_j's.

        Change the strategy of agent_i to the strategy of agent_j
        depending on their respective harvest rates and the imitation tendency
        according to a sigmoidal function.

        Parameters
        ----------
        agent_i : Agent (Individual or SocialSystem)
            Agent i whose strategy is to be changed to agent j's strategy
        agent_j : Agent (Individual or SocialSystem)
            Agent j whose strategy is imitated
        Returns
        -------

        """
        probability = 0.5 * np.tanh(agent_i.imitation_tendency *
                                    (agent_j.get_harvest_rate() -
                                     agent_i.get_harvest_rate()) + 1)
        if np.random.random() < probability:
            agent_i.strategy = agent_j.strategy

    def step_timing(self, t):
        return t + np.random.exponential(self.average_waiting_time)

    processes = [Step('Social Update is a step function',
                      [B.Culture.worlds.individuals.strategy],
                      [step_timing, social_update])]
